# Generated by Django 4.2.5 on 2025-08-24 00:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agendamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(db_index=True, verbose_name='Data')),
                ('hora', models.TimeField(verbose_name='Horário')),
                ('tipo_agendamento', models.CharField(choices=[('AVALIACAO', 'Avaliação'), ('PROCEDIMENTO', 'Procedimento')], max_length=20, verbose_name='Tipo de Agendamento')),
                ('status', models.CharField(choices=[('PENDENTE', 'Pendente'), ('CONFIRMADO', 'Confirmado'), ('CANCELADO', 'Cancelado'), ('CONCLUIDO', 'Concluído')], default='PENDENTE', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Caixa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ano', models.PositiveIntegerField()),
                ('mes', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'Caixa',
                'verbose_name_plural': 'Caixas',
                'ordering': ['-ano', '-mes'],
            },
        ),
        migrations.CreateModel(
            name='CategoriaDespesa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, verbose_name='Nome')),
                ('dt_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True, verbose_name='CPF')),
                ('telefone', models.CharField(max_length=14, verbose_name='Telefone')),
                ('email', models.EmailField(max_length=200, verbose_name='E-mail')),
                ('sexo', models.CharField(blank=True, choices=[('MASCULINO', 'Masculino'), ('FEMININO', 'Feminino'), ('OUTRO', 'Outro'), ('NAO_INFORMAR', 'Não Informar')], max_length=25, null=True, verbose_name='Gênero')),
                ('observacoes', models.CharField(blank=True, max_length=255, null=True, verbose_name='Observações')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
        ),
        migrations.CreateModel(
            name='Tratamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_tratamento', models.CharField(max_length=100, verbose_name='Tratamento')),
                ('tipo_tratamento', models.CharField(blank=True, choices=[('Facial', 'Facial'), ('Labial', 'Labial'), ('Glúteos', 'Glúteos'), ('Corporal', 'Corporal')], max_length=20, null=True, verbose_name='Tipo Tratamento')),
                ('duracao', models.PositiveIntegerField(blank=True, choices=[(30, '30 minutos'), (60, '1 hora'), (90, '1 hora e 30 minutos'), (120, '2 horas'), (150, '2 horas e 30 minutos'), (180, '3 horas'), (210, '3 horas e 30 minutos'), (240, '4 horas'), (270, '4 horas e 30 minutos'), (300, '5 horas'), (330, '5 horas e 30 minutos'), (360, '6 horas'), (390, '6 horas e 30 minutos'), (420, '7 horas'), (450, '7 horas e 30 minutos'), (480, '8 horas')], null=True, verbose_name='Duração (minutos)')),
                ('preco', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Preço')),
                ('descricao', models.CharField(max_length=250, verbose_name='Descrição')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
        ),
        migrations.CreateModel(
            name='Receita',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(blank=True, max_length=255, null=True, verbose_name='Descrição')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Valor')),
                ('forma_pagamento', models.CharField(choices=[('DINHEIRO', 'Dinheiro'), ('CARTAO_CREDITO', 'Cartão de Crédito'), ('CARTAO_DEBITO', 'Cartão de Débito'), ('PIX', 'Pix'), ('OUTRO', 'Outro')], max_length=20, verbose_name='Forma de Pagamento')),
                ('recebido', models.BooleanField(db_index=True, default=False, verbose_name='Recebido?')),
                ('data_recebimento', models.DateField(blank=True, db_index=True, null=True, verbose_name='Data de Recebimento')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Observações')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('agendamento', models.ForeignKey(blank=True, help_text='Selecione um agendamento se a receita estiver ligada a um serviço realizado.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinica.agendamento', verbose_name='Agendamento relacionado')),
            ],
            options={
                'verbose_name': 'Receita',
                'verbose_name_plural': 'Receitas',
                'ordering': ['-data_recebimento', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Despesa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_despesa', models.CharField(max_length=50, verbose_name='Despesa')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Valor')),
                ('data_vencimento', models.DateField(db_index=True, verbose_name='Data de Vencimento')),
                ('data_pagamento', models.DateField(blank=True, db_index=True, null=True, verbose_name='Data de Pagamento')),
                ('pago', models.BooleanField(db_index=True, default=False, verbose_name='Pago?')),
                ('fornecedor', models.CharField(blank=True, max_length=100, null=True, verbose_name='Fornecedor')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Observação')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='despesas', to='clinica.categoriadespesa')),
            ],
        ),
        migrations.AddField(
            model_name='agendamento',
            name='cliente',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.cliente', verbose_name='Cliente'),
        ),
        migrations.AddField(
            model_name='agendamento',
            name='tratamento',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinica.tratamento', verbose_name='Tratamento'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/', verbose_name='Foto de Perfil')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='agendamento',
            constraint=models.UniqueConstraint(fields=('cliente', 'data', 'hora'), name='unique_cliente_horario'),
        ),
    ]
